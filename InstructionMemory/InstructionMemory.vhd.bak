library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;
library work;


entity InstructionMemory is
	port(
		DR: IN STD_LOGIC_VECTOR(0 to 3);
		SA: In std_logic_vector(0 to 3);
		SB: In std_logic_vector(0 to 3);
		Opcode : In std_logic_vector(0 to 6);
		PC: In std_logic_vector(0 to 15);
		reset: In std_logic;
		wr: In std_logic;
		instr: out std_logic_vector(0 to 15)
	);
	
end InstructionMemory;

architecture behaivour of InstructionMemory is
type InstructionFile is array(0 to 15) of std_logic_vector(0 to 15);
signal instruction : InstructionFile;

begin
process(clock)
begin
	if(clock'event and clock='1') then
		if(Reset = '1') then
			
			for I in 0 to 7 loop
				registers(I)<= x"0000";
			end loop;
		
		else
			
			if(RW = '1') then
				registers(to_integer(unsigned(DA)))<=D;
			
			else
				A<=registers(to_integer(unsigned(AA)));
				B<=registers(to_integer(unsigned(BA)));
			
			end if;
		end if;
	end if;
end process;

end behaivour;